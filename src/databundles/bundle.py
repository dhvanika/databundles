'''
Created on Jun 9, 2012

@author: eric
'''

from database import Database
from identity import Identity #@UnusedImport
from library import LocalLibrary
from filesystem import  Filesystem
from bundleconfig import BundleDbConfig, BundleFileConfig
from schema import Schema
from partition import Partitions
import os.path

class Bundle(object):
    '''Represents a bundle, including all configuration 
    and top level operations. '''
 
    def __init__(self):
        '''
        '''
    
        self._schema = None
        self._partitions = None
 
    
    @property
    def schema(self):
        if self._schema is None:
            self._schema = Schema(self)
            
        return self._schema
    

    @property
    def partitions(self):     
        if self._partitions is None:
            self._partitions = Partitions(self)  
            
        return self._partitions

    @property
    def identity(self):
        '''Return an identity object. '''
        
        return Identity(**self.config.dict.get('identity'))
    

    @property
    def library(self):    
        return LocalLibrary(named_bundles=self.config.dict.get('named_bundles',None))

    
class DbBundle(Bundle):

    def __init__(self, database_file):
        '''Initialize a bundle and all of its sub-components. 
        
        If it does not exist, creates the bundle database and initializes the
        Dataset record and Config records from the bundle.yaml file. Through the
        config object, will trigger a re-load of the bundle.yaml file if it
        has changed. 
        
        Order of operations is:
            Create bundle.db if it does not exist
        '''
        
        super(DbBundle, self).__init__()
       
        
       
        self.database = Database(self, database_file)
        self.config = BundleDbConfig(self.database)

    def table_data(self, query):
        '''Return a petl container for a data table'''
        import petl 
        query = query.strip().lower()
        
        if 'select' not in query:
            query = "select * from {} ".format(query)
 
        
        return petl.fromsqlite3(self.database.path, query)
        

class BuildBundle(Bundle):
    '''A bundle class for building bund files. Uses the bundle.yaml file for
    identity configuration '''

    def __init__(self, bundle_dir=None):
        '''
        '''
        
        super(BuildBundle, self).__init__()
        
        if bundle_dir is None:
            bundle_dir = Filesystem.find_root_dir()
        
        if not os.path.isdir(bundle_dir):
            from exceptions import BundleError
            raise BundleError("BuildBundle must be constructed on a directory")
  
        self.bundle_dir = bundle_dir
        
        self._database  = None
       
        self.filesystem = Filesystem(self, bundle_dir)
        self.config = BundleFileConfig(self.bundle_dir)

        import base64
        self.logid = base64.urlsafe_b64encode(os.urandom(6)) 
        self.ptick_count = 0;

    @property
    def database(self):
        
        if self._database is None:
            self._database  = Database(self)
         
        return self._database

    @classmethod
    def rm_rf(cls, d):
        
        if not os.path.exists(d):
            return
        
        for path in (os.path.join(d,f) for f in os.listdir(d)):
            if os.path.isdir(path):
                cls.rm_rf(path)
            else:
                os.unlink(path)
        os.rmdir(d)

    def clean(self):
        '''Remove all files generated by the build process'''
        self.rm_rf(self.filesystem.build_path())
        self.rm_rf(self.filesystem.downloads_path())

    
    def log(self, message, **kwargs):
        '''Log the messsage'''
        print "LOG: ",message

    def error(self, message, **kwargs):
        '''Log an error messsage'''
        print "ERR: ",message

    def progress(self,message):
        '''print message to terminal, in place'''
        print 'PRG: ',message

    def ptick(self,message):
        '''Writes a tick to the stdout, without a space or newline'''
        import sys
        sys.stdout.write(message)
        
        self.ptick_count += len(message)
       
        if self.ptick_count > 72:
            sys.stdout.write("\n")
            self.ptick_count = 0


    ###
    ### Process Methods
    ###


    ### Prepare is run before building, part of the devel process.  

    def pre_prepare(self):
        return True

    def prepare(self):
        return True
    
    def post_prepare(self):
        return True
   
    
    ### Build the final package

    def pre_build(self):
        return True
        
    def build(self):
        return True
    
    def post_build(self):
        return True
    
        
    ### Submit the package to the library
 
    def pre_install(self):
        return True
    
    def install(self):
        return True
        
    def post_install(self):
        return True
    
    ### Submit the package to the repository
 
    def pre_submit(self):
        return True
    
    def submit(self):
        return True
        
    def post_submit(self):
        return True
    
    
    
    